package main

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/jguillaumes/go-genencode/internal/tablemgr"
)

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	table := flag.String("table", "", "The decoding table generated by CodecMapper")
	name := flag.String("name", "", "The name of the generated table")
	outFile := flag.String("output", "", "The output file for the generated tables")
	euro := flag.String("euro", "", "The value of the euro sign, in hex format")
	flag.Parse()

	if *table == "" || *name == "" {
		flag.Usage()
		os.Exit(1)
	}

	tableFile, err := os.Open(*table)
	if err != nil {
		log.Fatalln(err)
	}
	defer tableFile.Close()

	var outw io.Writer

	if *outFile == "" {
		outw = io.Writer(os.Stdout)
	} else {
		outw, err = os.Create(*outFile)
		if err != nil {
			log.Fatalf("Error creating output file %s : %v\n", *outFile, err)
		}
	}

	dect, ok, nok, comm, err := tablemgr.GenerateDecoder(tableFile)
	if err != nil {
		log.Fatalln(err)
	}
	log.Printf("Parsed %s table: %d comment lines, %d valid lines, ignored %d bad lines\n", *table, comm, ok, nok)
	decoderString := tablemgr.GenerateTable(dect, *name, tablemgr.DecodeTable, *euro)
	fmt.Fprint(outw, decoderString)

	fmt.Fprintf(outw, "\n----------------------------------------------------------------------------\n\n")

	enc, _ := tablemgr.GenerateEncoder(dect)
	encoderString := tablemgr.GenerateTable(enc, *name, tablemgr.EncodeTable, *euro)
	fmt.Fprint(outw, encoderString)

}
